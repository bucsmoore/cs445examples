worker_processes 1;

events { worker_connections 1024; }

http {
    include       mime.types;
    default_type  application/octet-stream;
    sendfile        on;
    keepalive_timeout  65;

    # Define the upstream for the frontend Flask app
    upstream app_backend {
        server app:5000; # 'app' is the service name in docker-compose, 5000 is its internal port
    }

    # Define the upstream for the API Flask app
    upstream api_backend {
        server api:5000; # 'api' is the service name in docker-compose, 5000 is its internal port
    }

    server {
        listen 80; # Nginx listens on port 80

        # Root for static files if you had them (optional for this minimal setup)
        # root /usr/share/nginx/html;

        # Serve the frontend app for root requests
        location / {
            proxy_pass http://app_backend;
            proxy_set_header Host $host;
            proxy_set_header X-Real-IP $remote_addr;
            proxy_set_header X-Forwarded-For $proxy_add_x_forwarded_for;
            proxy_set_header X-Forwarded-Proto $scheme;
        }

        # Route API requests to the API backend
        location /api/ {
            proxy_pass http://api_backend/; # The trailing slash is important to correctly map paths
            proxy_set_header Host $host;
            proxy_set_header X-Real-IP $remote_addr;
            proxy_set_header X-Forwarded-For $proxy_add_x_forwarded_for;
            proxy_set_header X-Forwarded-Proto $scheme;
            # Rewrite /api/ to just / for the backend API if your API doesn't expect /api/ in its routes
            # rewrite ^/api/(.*)$ /$1 break;
        }

        # Example of handling 404s (optional)
        error_page 404 /404.html;
        location = /404.html {
            root /usr/share/nginx/html; # A basic static 404 page
            internal;
        }
    }
}
